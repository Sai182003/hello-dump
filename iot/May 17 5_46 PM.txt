"""
Week-1
https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)


CREATE TYPE Address AS (street VARCHAR(100), city VARCHAR(50), state VARCHAR(50), zip_code CHAR(5));
CREATE TYPE Employee AS (emp_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), address Address, date_of_birth DATE, salary NUMERIC(10, 2));
CREATE TYPE Department AS (dept_id INTEGER, dept_name VARCHAR(100), location VARCHAR(100));
CREATE TYPE Project AS (proj_id INTEGER, proj_name VARCHAR(100), start_date DATE, end_date DATE);

ALTER TYPE Employee ADD ATTRIBUTE dept_id INTEGER;

CREATE TABLE Employees OF Employee (PRIMARY KEY (emp_id));
CREATE TABLE Departments OF Department (PRIMARY KEY (dept_id));
CREATE TABLE Projects OF Project (PRIMARY KEY (proj_id));

ALTER TABLE Employees ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);

CREATE TABLE EmployeeProjects (
    emp_id INTEGER,
    proj_id INTEGER,
    role VARCHAR(50),
    PRIMARY KEY (emp_id, proj_id),
    FOREIGN KEY (emp_id) REFERENCES Employees(emp_id),
    FOREIGN KEY (proj_id) REFERENCES Projects(proj_id)
);

CREATE FUNCTION Employee_Age(emp Employee) RETURNS INTEGER AS $$
BEGIN
    RETURN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM emp.date_of_birth);
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION Format_Address(addr Address) RETURNS VARCHAR AS $$
BEGIN
    RETURN addr.street || ', ' || addr.city || ', ' || addr.state || ' ' || addr.zip_code;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION Project_Duration(proj Project) RETURNS INTEGER AS $$
BEGIN
    RETURN EXTRACT(DAY FROM proj.end_date - proj.start_date);
END;
$$ LANGUAGE plpgsql;

CREATE VIEW EmployeeView AS
SELECT e.emp_id, e.first_name, e.last_name, e.address, Employee_Age(e) AS age, Format_Address(e.address) AS formatted_address, e.salary
FROM Employees e;

CREATE VIEW ProjectView AS
SELECT p.proj_id, p.proj_name, p.start_date, p.end_date, Project_Duration(p) AS duration
FROM Projects p;

SELECT * FROM EmployeeView WHERE age > 30;
SELECT * FROM ProjectView WHERE duration > 30;

UPDATE Employees
SET salary = salary + 1000
WHERE emp_id IN (SELECT emp_id FROM EmployeeView WHERE age > 40);

CREATE SEQUENCE emp_id_seq START WITH 1 INCREMENT BY 1;

INSERT INTO Employees VALUES (
    (SELECT NEXTVAL('emp_id_seq')),
    'John', 'Doe',
    ('123 Main St', 'Hometown', 'CA', '90210')::Address,
    '1985-06-15',
    50000.00
);

SELECT * FROM Employees;

"""

"""
Week-2
https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)

CREATE TABLE emp (
  empno INTEGER,
  empname TEXT
);
CREATE TABLE bankdatabase (
  bankno INTEGER,
  acctype TEXT,
  branchname TEXT
);
CREATE INDEX empindx ON emp(empno);
CREATE INDEX accindx ON bankdatabase(acctype);
CREATE INDEX compindx ON bankdatabase(acctype, branchname);
ALTER INDEX compindx RENAME TO compindx_new;
select * from pg_indexes;
DROP INDEX accindx;

"""

"""
Week-3
https://www.videlibri.de/cgi-bin/xidelcgi
(Select XPath 3.1)
(Select input file as XML)

XML File:

<bookstore>
<book category="cooking">
  <title lang="en">Everyday Italian</title>
  <author>Giada De Laurentiis</author>
  <year>2005</year>
  <price>30.00</price>
</book>
<book category="children">
  <title lang="en">Harry Potter</title>
  <author>J K. Rowling</author>
  <year>2005</year>
  <price>29.99</price>
</book>
<book category="web">
  <title lang="en">XQuery Kick Start</title>
  <author>James McGovern</author>
  <author>Per Bothner</author>
  <author>Kurt Cagle</author>
  <author>James Linn</author>
  <author>Vaidyanathan Nagarajan</author>
  <year>2003</year>
  <price>49.99</price>
</book>
<book category="web">
  <title lang="en">Learning XML</title>
  <author>Erik T. Ray</author>
  <year>2003</year>
  <price>39.95</price>
</book>
</bookstore>

1: Write X path query to display all titles.
/bookstore/book/title
2: select all the price nodes with a price higher than 35.
/bookstore/book[price>35]/price
3: select all the title nodes with a price higher than 35.
/bookstore/book[price>35]/title

"""

"""
Week-4
https://www.videlibri.de/cgi-bin/xidelcgi
(Select XQuery 3.1)
(Select input file as XML)

XML File:

<bookstore>
<book category="cooking">
  <title lang="en">Everyday Italian</title>
  <author>Giada De Laurentiis</author>
  <year>2005</year>
  <price>30.00</price>
</book>
<book category="children">
  <title lang="en">Harry Potter</title>
  <author>J K. Rowling</author>
  <year>2005</year>
  <price>29.99</price>
</book>
<book category="web">
  <title lang="en">XQuery Kick Start</title>
  <author>James McGovern</author>
  <author>Per Bothner</author>
  <author>Kurt Cagle</author>
  <author>James Linn</author>
  <author>Vaidyanathan Nagarajan</author>
  <year>2003</year>
  <price>49.99</price>
</book>
<book category="web">
  <title lang="en">Learning XML</title>
  <author>Erik T. Ray</author>
  <year>2003</year>
  <price>39.95</price>
</book>
</bookstore>

1: Select all the title elements under the book elements that are under the bookstore element that have a price element
with a value that is higher than 30

for $x in /bookstore/book
where $x/price>30
return $x/title

2: Retrieve all titles of books in alphabetical order

for $x in /bookstore/book/title
order by $x
return $x

"""

"""
Week-5
(Nested-Loop Join)
(OnlineGDB - C++(TurboC))
https://www.onlinegdb.com/f4h2sgcMdD

#include <iostream.h>

struct record1 {
    char a1;
    int a2;
};

struct record2 {
    char a1;
    char a3;
};

struct record3 {
    char a1;
    int a2;
    char a3;
};

int nested_loop_join(record1 t1[], int m, record2 t2[], int n, record3 j_table[]) {
    int k = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (t1[i].a1 == t2[j].a1) {
                j_table[k].a1 = t1[i].a1;
                j_table[k].a2 = t1[i].a2;
                j_table[k].a3 = t2[j].a3;
                k++;
            }
        }
    }
    return k;
}

void display(record3 j_table[], int size) {
    cout << "\n\ta1\ta2\ta3\n";
    for (int i = 0; i < size; i++) {
        cout << "\n\t" << j_table[i].a1 << "\t" << j_table[i].a2 << "\t" << j_table[i].a3;
    }
}

int main() {
    record1 table1[7] = {{'a', 3}, {'b', 1}, {'d', 8}, {'d', 13}, {'f', 7}, {'m', 5}};
    record2 table2[5] = {{'a', 'A'}, {'b', 'G'}, {'c', 'L'}, {'d', 'N'}, {'m', 'B'}};
    record3 join_table[10];

    int join_table_size;

    join_table_size = nested_loop_join(table1, 7, table2, 5, join_table);
    display(join_table, join_table_size);
}

"""

"""
Week-6
(Merge Sort on Tables (External Sort-Merge))
(OnlineGDB - C++(TurboC))
https://onlinegdb.com/Z2S7PFDeK

#include <stdio.h>
#include <stdlib.h>

struct Table {
    char key;
    int value;
} T[6] = { {'g', 24}, {'a', 19}, {'d', 31}, {'c', 33}, {'b', 14}, {'e', 16} };

void sort(struct Table* b, int bsize) {
    struct Table temp;
    for (int i = 1; i <= bsize; i++) {
        for (int j = 0; j < bsize - i; j++) {
            if (b[j].key > b[j + 1].key) {
                temp = b[j];
                b[j] = b[j + 1];
                b[j + 1] = temp;
            }
        }
    }
}

void merge(struct Table* b1, struct Table* b2) {
    int index = 0, i = 0, j = 0;
    while (i < 3 && j < 3) {
        if (b1[i].key < b2[j].key) {
            T[index] = b1[i];
            index++;
            i++;
        } else {
            T[index] = b2[j];
            index++;
            j++;
        }
    }
    while (i < 3) {
        T[index] = b1[i];
        index++;
        i++;
    }
    while (j < 3) {
        T[index] = b2[j];
        index++;
        j++;
    }
}

int main() {
    int block_size = 3, no_of_blocks, no_of_merges, i, j, index;
    struct Table* blocks[10];

    printf("\nInitially the table is:");
    for (index = 0; index < 6; index++)
        printf("\n%c\t%d", T[index].key, T[index].value);

    no_of_blocks = 6 / block_size;
    for (i = 0; i < no_of_blocks; i++)
        blocks[i] = (struct Table*)calloc(sizeof(struct Table), block_size);

    index = 0;
    for (i = 0; i < no_of_blocks; i++) {
        for (j = 0; j < block_size; j++) {
            blocks[i][j].key = T[index].key;
            blocks[i][j].value = T[index].value;
            index++;
        }
    }

    for (i = 0; i < no_of_blocks; i++) {
        printf("\nBlock %d:", i);
        for (j = 0; j < block_size; j++) {
            printf("\n%c\t%d", blocks[i][j].key, blocks[i][j].value);
        }
    }

    for (i = 0; i < no_of_blocks; i++)
        sort(blocks[i], block_size);

    printf("\nAfter sorting the blocks are:");
    for (i = 0; i < no_of_blocks; i++) {
        printf("\nBlock %d:", i);
        for (j = 0; j < block_size; j++) {
            printf("\n%c\t%d", blocks[i][j].key, blocks[i][j].value);
        }
    }

    no_of_merges = no_of_blocks / 2;
    j = 0;
    for (i = 0; i < no_of_merges; i++) {
        merge(blocks[j], blocks[j + 1]);
        j = j + 2;
    }

    printf("\nAfter Merging the blocks the table is:");
    for (index = 0; index < 6; index++)
        printf("\n%c\t%d", T[index].key, T[index].value);

    return 0;
}

"""

"""
Week-7
(Merge Join (Given as Merge Sort))
(OnlineGDB - C++(TurboC))
https://onlinegdb.com/4s_gsOnWA - Merge Sort
https://onlinegdb.com/vpbm-08VM - Merge Join

#include <stdio.h>

void merge(int arr[], int p, int q, int r) 
{
    int n1 = q - p + 1;
    int n2 = r - q;
    int L[100], M[100];
    
    int i = 0, j = 0, k = p;

    for (i = 0; i < n1; i++)
        L[i] = arr[p + i];
    for (j = 0; j < n2; j++)
        M[j] = arr[q + 1 + j];

    while (i < n1 && j < n2) {
        if (L[i] <= M[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = M[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = M[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {6, 5, 12, 10, 9, 1};
    int size = sizeof(arr) / sizeof(arr[0]);

    mergeSort(arr, 0, size - 1);

    printf("Sorted array: \n");
    printArray(arr, size);

    return 0;
}

"""

"""
Week-8
(Block Nested-Loop Join)
(OnlineGDB - C++(TurboC))
https://onlinegdb.com/PlFv5LKuw

#include <stdio.h>

struct record1 {
    char a1;
    int a2;
};

struct record2 {
    char a1;
    char a3;
};

struct record3 {
    char a1;
    int a2;
    char a3;
};

int block_nested_loop_join(struct record1 t1[][3], int m, struct record2 t2[][3], int n, struct record3 j_table[]) {
    int c = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < 3; k++) {
                for (int l = 0; l < 3; l++) {
                    if (t1[i][k].a1 == t2[j][l].a1) {
                        j_table[c].a1 = t1[i][k].a1;
                        j_table[c].a2 = t1[i][k].a2;
                        j_table[c].a3 = t2[j][l].a3;
                        c++;
                    }
                }
            }
        }
    }
    return c;
}

void display(struct record3 j_table[], int size) {
    printf("\n\ta1\ta2\ta3\n");
    for (int i = 0; i < size; i++) {
        printf("\t%c\t%d\t%c\n", j_table[i].a1, j_table[i].a2, j_table[i].a3);
    }
}

int main() {
    struct record1 table1[2][3] = {
        {
            {'a', 3}, {'b', 1}, {'d', 8}
        },
        {
            {'d', 13}, {'f', 7}, {'m', 5}
        }
    };

    struct record2 table2[2][3] = {
        {
            {'a', 'A'}, {'b', 'G'}, {'c', 'L'}
        },
        {
            {'d', 'N'}, {'m', 'B'}
        }
    };

    struct record3 join_table[10];
    int join_table_size;

    join_table_size = block_nested_loop_join(table1, 2, table2, 2, join_table);
    display(join_table, join_table_size);

    return 0;
}

"""

"""
Week-9
(Hash Join)
(OnlineGDB - C++(TurboC))
https://onlinegdb.com/mPyaTezgV

#include <stdio.h>
#include <stdlib.h>

#define SIZE 20

// Structure to store data
struct DataItem {
    int data;
    int key;
};

// Hash table array
struct DataItem* hashArray[SIZE];
struct DataItem* dummyItem;
struct DataItem* item;

// Hash function to calculate hash index
int hashCode(int key) {
    return key % SIZE;
}

// Search function to find the item with the given key
struct DataItem* search(int key) {
    int hashIndex = hashCode(key);
    
    while (hashArray[hashIndex] != NULL) {
        if (hashArray[hashIndex]->key == key)
            return hashArray[hashIndex];
        
        // Move to the next index
        ++hashIndex;
        
        // Wrap around the table
        hashIndex %= SIZE;
    }
    
    return NULL; // Item not found
}

// Insert function to add a new item to the hash table
void insert(int key, int data) {
    struct DataItem* item = (struct DataItem*)malloc(sizeof(struct DataItem));
    item->data = data;
    item->key = key;
    
    int hashIndex = hashCode(key);
    
    // Move to the next index until an empty or deleted cell is found
    while (hashArray[hashIndex] != NULL && hashArray[hashIndex]->key != -1) {
        ++hashIndex;
        hashIndex %= SIZE;
    }
    
    hashArray[hashIndex] = item;
}

// Delete function to remove an item from the hash table
struct DataItem* deleteItem(struct DataItem* item) {
    int key = item->key;
    int hashIndex = hashCode(key);
    
    while (hashArray[hashIndex] != NULL) {
        if (hashArray[hashIndex]->key == key) {
            struct DataItem* temp = hashArray[hashIndex];
            hashArray[hashIndex] = dummyItem;  // Assign dummy item to mark as deleted
            return temp;
        }
        
        ++hashIndex;
        hashIndex %= SIZE;
    }
    
    return NULL; // Item not found
}

// Function to display the contents of the hash table
void display() {
    int i = 0;
    for (i = 0; i < SIZE; i++) {
        if (hashArray[i] != NULL) {
            printf("(%d,%d) ", hashArray[i]->key, hashArray[i]->data);
        }
    }
    printf("\n");
}

int main() {
    dummyItem = (struct DataItem*)malloc(sizeof(struct DataItem));
    dummyItem->data = -1;
    dummyItem->key = -1;
    
    // Inserting items into the hash table
    insert(1, 20);
    insert(2, 70);
    insert(42, 80);
    insert(4, 25);
    insert(12, 44);
    insert(14, 32);
    insert(17, 11);
    insert(13, 78);
    insert(37, 97);
    
    printf("Insertion done: \n");
    printf("Contents of Hash Table: ");
    display();
    
    int ele = 37;
    printf("The element to be searched: %d\n", ele);
    
    item = search(ele);
    if (item != NULL) {
        printf("Element found: %d\n", item->key);
    } else {
        printf("Element not found\n");
    }
    
    // Deleting the item
    deleteItem(item);
    printf("Hash Table contents after deletion: ");
    display();
    
    return 0;
}


"""

"""
Week-10
(Parallel External Sort-Merge, Range-partitioning algorithms)
(OnlineGDB - C++(TurboC))
https://onlinegdb.com/0zyEd9HQz

#include <stdio.h>
#include <stdlib.h>

// Function to swap two values
void swap_val(int *x, int *y) {
    int tmp = *x;
    *x = *y;
    *y = tmp;
}

// Function to partition the array and return the pivot index
int partition(int arra_nums[], int low, int high) {
    int pivot = arra_nums[low];
    int i = low - 1, j = high + 1;

    while (1) {
        // Find leftmost element >= pivot
        do { 
            i++; 
        } while (arra_nums[i] < pivot);

        // Find rightmost element <= pivot
        do { 
            j--; 
        } while (arra_nums[j] > pivot);

        // If two pointers met
        if (i >= j)
            return j;

        // Swap elements at i and j
        swap_val(&arra_nums[i], &arra_nums[j]);
    }
}

// Recursive function to perform partition sort
int* partitionSort(int arra_nums[], int low, int high) {
    if (low < high) {
        // Get the pivot index
        int value = partition(arra_nums, low, high);
        // Recursively sort the two sub-arrays
        partitionSort(arra_nums, low, value);
        partitionSort(arra_nums, value + 1, high);
        return arra_nums;
    }
}

// Main function
int main() {
    int arra_nums[100], i, size=0;
    // Input the number of elements
    printf("Input number of elements you want to sort: ");
    scanf("%d", &size);
    printf("\nInput the numbers:\n");

    for (i = 0; i < size; i++) {
        scanf("%d", &arra_nums[i]);
    }

    // Check if there is at least one element
    if (size >= 1) {
        // Call the partitionSort function to sort the array
        int* result_arra = partitionSort(arra_nums, 0, size - 1);

        // Display the sorted array
        printf("Sorted Array: \n");
        for (i = 0; i < size; i++) {
            printf("%d ", result_arra[i]);
        }
        printf("\n");
    }

    return 0;
}

"""

"""
Week-11
(Spatial Databases)

Hands-on with QGIS Tool

1) Download and Extract the Data:

Download the Natural Earth Quick Start Kit data.
Extract it and open it in QGIS (a free open-source GIS tool).

2) Set the Language and Visual Formats:

Set the suitable language and format settings in QGIS.

3) Zoom into Japan:

Use QGIS to navigate to Japan in the map.

4) Turn Off Excess Layers:

Turn off unnecessary layers such as ne_10m_geography_marine_polys and ne_10m_admin_0_disputed_areas.

5) Open a New Print Layout:

From the Add Item option, select Add Map.
Draw the Region of Interest (ROI) in the map composer to display the map window.

6) Adjust Zoom and Set Scale:

Adjust the zoom level and set the Scale value to 10000000 in the Item Properties tab.

7) Create Inset Maps:

Create an inset map showing a smaller area, e.g., zooming into Tokyo.

8) Set the Overview in QGIS:

Set Map 2 as the overview in the Item Properties tab, and change the blending mode to multiply.

9) Add Grid and Coordinates:

In the Grid section of the Item Properties, select solid grid and customize it by appending the ° symbol to the grid coordinates.

10) Add a Rectangle, North Arrow, and Scalebar:

Add a rectangle matching the map colors.
Add a North arrow from SVG images and a Scalebar with Double Box style and a fixed width of 200 units.

11) Add Labels:

Add two labels: one for the title ("Japan") and one for a short description.

Program for Spatial Databases

https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)

1. Creating Spatial Database Table

CREATE TABLE places (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    latitude FLOAT,
    longitude FLOAT
);

2. Inserting Spatial Data
INSERT INTO places (name, latitude, longitude) 
VALUES 
('Place A', 40.730610, -73.935242), 
('Place B', 40.712800, -74.006000),
('Place C', 40.678200, -73.944200);

3. Querying Spatial Data
SELECT name, latitude, longitude
FROM places
WHERE (6371000 * acos(
    cos(radians(40.730610)) * cos(radians(latitude)) * 
    cos(radians(longitude) - radians(-73.935242)) + 
    sin(radians(40.730610)) * sin(radians(latitude))
)) <= 10000;  --10 km radius

4. Find Places that intersect a polygon
SELECT name, latitude, longitude
FROM places
WHERE latitude BETWEEN 40 AND 41 AND longitude BETWEEN -74 AND -73;

"""

"""
Week-12
(Temporal Databases)
https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)

1. Creating Temporal Table
CREATE TABLE employee_positions (
    emp_id INT,
    position VARCHAR(100),
    department VARCHAR(100),
    valid_from DATE,
    valid_to DATE,
    transaction_from TIMESTAMP,
    transaction_to TIMESTAMP,
    PRIMARY KEY (emp_id, valid_from)
);

2. Inserting Temporal Data
INSERT INTO employee_positions (emp_id, position, department, valid_from, valid_to, transaction_from, transaction_to)
VALUES
(1, 'Software Engineer', 'Engineering', '2022-01-01', '2023-01-01', '2022-01-01 08:00:00', '2023-01-01 10:00:00'),
(1, 'Senior Software Engineer', 'Engineering', '2023-01-01', '9999-12-31', '2023-01-01 10:00:01', '9999-12-31 23:59:59'),
(2, 'HR Manager', 'HR', '2020-06-01', '2022-06-01', '2020-06-01 09:00:00', '2022-06-01 17:00:00');

3. Query the current state of an employee
SELECT emp_id, position, department
FROM employee_positions
WHERE emp_id = 1
  AND valid_from <= CURRENT_DATE
  AND valid_to > CURRENT_DATE
  AND transaction_from <= CURRENT_TIMESTAMP
  AND transaction_to > CURRENT_TIMESTAMP;

"""

"""
Week-13
(Multimedia Databases)
https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)

1. Creating Multimedia Tables
-- Create table for storing image metadata
CREATE TABLE images (
    image_id SERIAL PRIMARY KEY,
    title VARCHAR(100),
    description TEXT,
    file_path VARCHAR(255),
    file_size INT, -- Size in bytes
    upload_date TIMESTAMP,
    resolution VARCHAR(50) -- Resolution (e.g., '1920x1080')
);

-- Create table for storing video metadata
CREATE TABLE videos (
    video_id SERIAL PRIMARY KEY,
    title VARCHAR(100),
    description TEXT,
    file_path VARCHAR(255),
    file_size INT, -- Size in bytes
    upload_date TIMESTAMP,
    duration INT, -- Duration in seconds
    resolution VARCHAR(50) -- Resolution (e.g., '4K')
);

-- Create table for storing audio metadata
CREATE TABLE audios (
    audio_id SERIAL PRIMARY KEY,
    title VARCHAR(100),
    artist VARCHAR(100),
    file_path VARCHAR(255),
    file_size INT, -- Size in bytes
    upload_date TIMESTAMP,
    duration INT -- Duration in seconds
);

2. Inserting Multimedia Data
-- Insert data for images
INSERT INTO images (title, description, file_path, file_size, upload_date, resolution)
VALUES 
('Sunset', 'A beautiful sunset over the ocean.', '/images/sunset.jpg', 204800, '2024-12-01 10:00:00', '1920x1080'),
('Mountain', 'Snow-capped mountains during winter.', '/images/mountain.jpg', 307200, '2024-11-25 12:30:00', '3840x2160');

-- Insert data for videos
INSERT INTO videos (title, description, file_path, file_size, upload_date, duration, resolution)
VALUES 
('Nature Documentary', 'A documentary about wildlife in Africa.', '/videos/nature_documentary.mp4', 104857600, '2024-12-01 10:00:00', 3600, '1920x1080'),
('Space Exploration', 'A video documenting recent space missions.', '/videos/space_exploration.mp4', 524288000, '2024-11-20 15:00:00', 5400, '4K');

-- Insert data for audios
INSERT INTO audios (title, artist, file_path, file_size, upload_date, duration)
VALUES 
('Classical Symphony', 'Beethoven', '/audios/classical_symphony.mp3', 10240000, '2024-12-02 08:00:00', 3600),
('Jazz Improv', 'Miles Davis', '/audios/jazz_improv.mp3', 5120000, '2024-11-28 10:30:00', 2700);

3. Multimedia Queries (Query all images uploaded after a certain date)
SELECT image_id, title, description, file_path, upload_date, resolution
FROM images
WHERE upload_date > '2024-11-24';

"""

"""
Week-14
(Geographic Databases)

(WITH POSTGIS - Given in Lab)
1. Creating Geographic Tables
CREATE EXTENSION IF NOT EXISTS postgis; -- Enable PostGIS extension

CREATE TABLE cities (
    city_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    population INT,
    location GEOGRAPHY(Point, 4326)  -- Location is a point (latitude, longitude) with SRID 4326 (WGS 84)
);

2. Inserting Geographic Data
INSERT INTO cities (name, population, location)
VALUES 
('New York', 8419600, ST_SetSRID(ST_MakePoint(-74.0060, 40.7128), 4326)),  -- New York (Longitude, Latitude)
('Los Angeles', 3980400, ST_SetSRID(ST_MakePoint(-118.2437, 34.0522), 4326)),
('Chicago', 2716000, ST_SetSRID(ST_MakePoint(-87.6298, 41.8781), 4326));

INSERT INTO parks (name, area, boundary)
VALUES 
('Central Park', 3410000, ST_SetSRID(ST_GeomFromText('POLYGON((-73.9654 40.7829, -73.9499 40.7840, -73.9486 40.7682, -73.9642 40.7668, -73.9654 40.7829))'), 4326)),
('Griffith Park', 4380000, ST_SetSRID(ST_GeomFromText('POLYGON((-118.3030 34.1391, -118.2956 34.1400, -118.2921 34.1285, -118.2997 34.1263, -118.3030 34.1391))'), 4326));

3. Geographic Queries (Query all cities within a certain radius of a point)
SELECT name, population, ST_AsText(location)
FROM cities
WHERE ST_DWithin(location, ST_SetSRID(ST_MakePoint(-74.0060, 40.7128), 4326), 10000);  -- 10 km radius


(WITHOUT POSTGIS)
https://www.db-fiddle.com/
(Change version to PostgreSQL 17)
(Write under Query SQL)

1. Creating Geographic Tables
-- Create table for storing city metadata
CREATE TABLE cities (
    city_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    population INT,
    latitude FLOAT,  -- Latitude of the city
    longitude FLOAT  -- Longitude of the city
);

-- Create table for storing park metadata
CREATE TABLE parks (
    park_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    area INT,  -- Area in square meters
    latitude FLOAT,  -- Latitude of the park
    longitude FLOAT  -- Longitude of the park
);

2. Inserting Geographic Data
-- Insert data for cities
INSERT INTO cities (name, population, latitude, longitude)
VALUES 
('New York', 8419600, 40.7128, -74.0060),
('Los Angeles', 3980400, 34.0522, -118.2437),
('Chicago', 2716000, 41.8781, -87.6298);

-- Insert data for parks
INSERT INTO parks (name, area, latitude, longitude)
VALUES 
('Central Park', 3410000, 40.7829, -73.9654),
('Griffith Park', 4380000, 34.1391, -118.3030);

3. Geographic Queries (Query all cities within a certain radius of a point)
SELECT name, population, latitude, longitude,
       6371 * acos(
           cos(radians(40.7128)) * cos(radians(latitude)) * 
           cos(radians(longitude) - radians(-74.0060)) + 
           sin(radians(40.7128)) * sin(radians(latitude))
       ) AS distance_from_new_york_km
FROM cities
WHERE 6371 * acos(
           cos(radians(40.7128)) * cos(radians(latitude)) * 
           cos(radians(longitude) - radians(-74.0060)) + 
           sin(radians(40.7128)) * sin(radians(latitude))
       ) <= 10;  -- Finds cities within 10 km of New York

"""
